FROM dunglas/frankenphp:1.4-php8.3-bookworm

ARG APP_ENV=production
ARG ENV_FILE

# Environment variables
ENV APP_ENV=${APP_ENV} \
    FRANKENPHP_CONFIG="worker ./public/index.php" \
    FRANKENPHP_DOCUMENT_ROOT=/var/www/html/public \
    PHP_OPCACHE_ENABLE=1 \
    PHP_OPCACHE_VALIDATE_TIMESTAMPS=0

# Install system dependencies
RUN apt-get update && \
    apt-get install -y \
    git \
    curl \
    wget \
    unzip \
    libzip-dev \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libsqlite3-dev \
    libssh2-1-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && git config --system --add safe.directory /var/www/html

# Install PHP extensions
ADD --chmod=0755 https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/
RUN install-php-extensions \
    pdo \
    pdo_sqlite \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    zip

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/local/bin/composer

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

WORKDIR /var/www/html

# Copy application files
COPY . .

# Copy environment file
COPY ${ENV_FILE} .env

RUN mkdir -p /var/www/html/database && \
    touch /var/www/html/database/database.sqlite && \
    rm -rf public/build

# Install Turso PHP extension
ENV COMPOSER_HOME=/root/.composer
ENV PATH="${COMPOSER_HOME}/vendor/bin:${PATH}"
RUN composer global require darkterminal/turso-php-installer
RUN turso-php-installer install -n --thread-safe

# Install dependencies
RUN composer install --optimize-autoloader --no-dev --no-interaction \
    && php artisan migrate:fresh --seed --force \
    && php artisan sqld:remove-database-except-default \
    && php artisan config:clear \
    && php artisan route:clear \
    && php artisan view:clear \
    && rm -rf database/migrations \
    && rm -rf database/seeders \
    && rm -rf database/factories \
    && rm -rf database/libsql-data \
    && npm ci --omit=dev \
    && npm run build \
    && rm -f public/hot

# Set permissions
RUN chown -R www-data:www-data storage bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache

# Entrypoint script
RUN mv entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

EXPOSE 8000

ENTRYPOINT ["sh", "-c", "/usr/local/bin/docker-entrypoint.sh"]

I've this sqlite database schema:

CREATE TABLE IF NOT EXISTS "users" ('id' integer primary key autoincrement not null, 'name' varchar not null, 'username' varchar not null, 'email' varchar not null, 'email_verified_at' datetime, 'password' varchar not null, 'remember_token' varchar, 'created_at' datetime, 'updated_at' datetime);
CREATE UNIQUE INDEX 'users_username_unique' on "users" ('username');
CREATE UNIQUE INDEX 'users_email_unique' on "users" ('email');

CREATE TABLE IF NOT EXISTS "user_databases" ('id' integer primary key autoincrement not null, 'user_id' integer not null, 'database_name' varchar not null, 'is_schema' varchar not null, 'created_at' datetime, 'updated_at' datetime, foreign key('user_id') references "users"('id') on delete cascade);
CREATE UNIQUE INDEX 'user_databases_database_name_unique' on "user_databases" ('database_name');

CREATE TABLE IF NOT EXISTS "query_metrics" ('id' integer primary key autoincrement not null, 'database_id' integer not null, 'rows_read_count' integer not null, 'rows_written_count' integer not null, 'storage_bytes_used' integer not null, 'write_requests_delegated' integer not null, 'replication_index' integer not null, 'embedded_replica_frames_replicated' integer not null, 'query_count' integer not null, 'elapsed_ms' float not null, 'queries' text, 'created_at' datetime, 'updated_at' datetime, foreign key('database_id') references "user_databases"('id') on delete cascade);

CREATE TABLE IF NOT EXISTS "top_queries" ('id' integer primary key autoincrement not null, 'main_id' integer not null, 'rows_written' integer not null, 'rows_read' integer not null, 'query' text not null, 'created_at' datetime, 'updated_at' datetime, foreign key('main_id') references "query_metrics"('id') on delete cascade);

CREATE TABLE IF NOT EXISTS "slowest_queries" ('id' integer primary key autoincrement not null, 'main_id' integer not null, 'elapsed_ms' float not null, 'rows_read' integer not null, 'rows_written' integer not null, 'query' text not null, 'created_at' datetime, 'updated_at' datetime, foreign key('main_id') references "query_metrics"('id') on delete cascade);

I want to get
- 10 the most used databases
- 10 the slowest queries
- 10 the most used queries

I can't figure out how to do this.

----

SELECT 
    ud.database_name,
    SUM(qm.query_count) AS total_queries,
    COUNT(qm.id) AS metric_entries
FROM user_databases ud
JOIN query_metrics qm ON ud.id = qm.database_id
GROUP BY ud.id
ORDER BY total_queries DESC
LIMIT 10;

SELECT 
    query,
    AVG(elapsed_ms) AS avg_duration,
    COUNT(*) AS occurrences
FROM slowest_queries
GROUP BY query
ORDER BY avg_duration DESC
LIMIT 10;

SELECT 
    query,
    COUNT(*) AS usage_count,
    SUM(rows_read) AS total_rows_read,
    SUM(rows_written) AS total_rows_written
FROM (
    SELECT query, rows_read, rows_written FROM top_queries
    UNION ALL
    SELECT query, rows_read, rows_written FROM slowest_queries
) AS combined_queries
GROUP BY query
ORDER BY usage_count DESC
LIMIT 10;

SELECT 
    q.query,
    COUNT(*) AS execution_count,
    AVG(sq.elapsed_ms) AS avg_duration,
    SUM(q.rows_read) AS total_rows_read,
    SUM(q.rows_written) AS total_rows_written
FROM (
    SELECT query, rows_read, rows_written, main_id FROM top_queries
    UNION ALL
    SELECT query, rows_read, rows_written, main_id FROM slowest_queries
) q
JOIN slowest_queries sq ON q.main_id = sq.main_id
GROUP BY q.query
ORDER BY execution_count DESC, avg_duration DESC
LIMIT 10;

Convert all of the above to SQL into Laravel Eloquent queries, here is my Eloquent Models:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class UserDatabase extends Model
{
    protected $fillable = [
        'user_id',
        'database_name',
        'is_schema',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function queryMetrics()
    {
        return $this->hasMany(QueryMetric::class);
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class QueryMetric extends Model
{
    protected $table = 'query_metrics';
    protected $fillable = [
        'database_id',
        'row_read_count',
        'row_written_count',
        'storage_bytes_used',
        'write_requests_delegated',
        'replication_index',
        'embedded_replica_frames_replicated',
        'query_count',
        'elapsed_ms',
        'queries',
    ];

    public function database()
    {
        return $this->belongsTo(UserDatabase::class);
    }

    public function topQueries()
    {
        return $this->hasMany(TopQuery::class);
    }

    public function slowestQueries()
    {
        return $this->hasMany(SlowestQuery::class);
    }

    // get query metrics for last 24 hours
    public static function scopeLast24Hours(int $userDatabaseId)
    {
        return self::where('database_id', $userDatabaseId)
            ->where('created_at', '>', now()
                ->subDays(1))
            ->get();
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class TopQuery extends Model
{
    protected $table = 'top_queries';

    protected $fillable = [
        'main_id',
        'rows_written',
        'rows_read',
        'query',
    ];

    public function queryMetric()
    {
        return $this->belongsTo(QueryMetric::class);
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class SlowestQuery extends Model
{
    protected $table = 'slowest_queries';

    protected $fillable = [
        'main_id',
        'query',
        'rows_read',
        'rows_written',
        'elapsed_ms',
    ];

    public function queryMetric()
    {
        return $this->belongsTo(QueryMetric::class);
    }
}

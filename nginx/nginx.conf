map $http_authorization $grpc_auth {
    default "Bearer $http_authorization";
}

server {
    listen 8080;
    http2 on;

    server_name ~^(?<subdomain>[^.]+)\.localhost$;
    
    resolver 127.0.0.11 valid=30s;
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_body_in_single_buffer on;
    
    auth_request /validate-subdomain;
    auth_request_set $access_level $upstream_http_x_access_level;

    error_page 400 401 402 403 405 500 501 502 503 504 = @blank_response;
    proxy_intercept_errors on;

    location @blank_response {
        header_filter_by_lua_block {
            ngx.header.content_type = nil
            ngx.header.content_length = nil
            ngx.header.server = nil
            for k in pairs(ngx.header) do
                if k:lower() ~= "content-security-policy" then
                    ngx.header[k] = nil
                end
            end
        }

        # I don't know how to not display any content when it's disallowed
        # The best practice is display the 403 Forbidden status code
        # but, it's display the HTML in (f) CLI
        # TODO: Make this more clear and smooth
        return 204;
    }

    location ~ ^/wal_log\.ReplicationLog/ {
        auth_request off;
        grpc_pass grpc://db:8080;

        # Required gRPC headers
        grpc_set_header Content-Type application/grpc;
        grpc_set_header TE trailers;

        # Set headers
        grpc_set_header Turso-Database $subdomain;
        grpc_set_header X-Proxy-Authorization $grpc_auth;
        grpc_set_header Host $host;
    }

    location ~ ^/proxy\.Proxy/ {
        auth_request off;
        grpc_pass grpc://db:8080;

        # Required gRPC headers
        grpc_set_header Content-Type application/grpc;
        grpc_set_header TE trailers;

        # Set headers
        grpc_set_header Turso-Database $subdomain;
        grpc_set_header X-Proxy-Authorization $grpc_auth;
        grpc_set_header Host $host;
    }

    location / {
        # Add protocol upgrade headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_intercept_errors on;

        set $block_write 0;
        set $sql_pattern "(?i)\\b(INSERT|UPDATE|DELETE|CREATE|ALTER|DROP)\\b";

        access_by_lua_block {
            ngx.req.read_body()
            local access_level = ngx.var.access_level
            local request_body = ngx.var.request_body
            
            -- Reset block status
            if access_level == "none" then
                ngx.exit(403)
            end

            if access_level == "read-only" then
                ngx.var.block_write = 1
            else
                ngx.var.block_write = 0
            end

            -- Only check for SQL operations if read-only access
            if ngx.var.block_write == "1" and request_body then
                local cjson = require "cjson.safe"
                local data, err = cjson.decode(request_body)
                
                if data and data.requests then
                    for _, req in ipairs(data.requests) do
                        if req.type == "execute" and req.stmt and req.stmt.sql then
                            local sql = req.stmt.sql:upper()
                            if ngx.re.find(sql, ngx.var.sql_pattern, "joi") then
                                ngx.exit(403)
                            end
                        end
                    end
                end
            end
        }

        proxy_set_header Authorization $http_authorization;
        proxy_set_header Turso-Database $subdomain;
        proxy_pass http://db:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location @blank_response {
        header_filter_by_lua_block {
            if ngx.var.http_content_type == "application/grpc" then
                ngx.header.content_type = "application/grpc"
                ngx.status = 13
            else
                ngx.header.content_type = nil
            end
            ngx.header.server = nil
        }
        return 204;
    }

    location = /validate-subdomain {
        internal;
        
        if ($http_user_agent ~* (Mozilla|Safari|Chrome|Firefox|Postman)) {
            return 200;
        }

        proxy_pass http://web:8000/validate-subdomain;
        proxy_set_header X-Subdomain $subdomain;
        proxy_set_header X-Auth-Token $arg_authToken$arg_auth_token$arg_jwt$http_authorization;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }
}
